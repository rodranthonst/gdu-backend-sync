# ============================================================================
# CONFIGURACIÓN DEL BACKEND SYNC - GESTOR DE UNIDADES COMPARTIDAS
# ============================================================================
# 
# INSTRUCCIONES:
# 1. Copia este archivo como '.env' en la misma carpeta
# 2. Rellena todas las variables con tus datos reales
# 3. NUNCA subas el archivo .env al repositorio (debe estar en .gitignore)
# 
# ============================================================================

# ----------------------------------------------------------------------------
# CONFIGURACIÓN DEL SERVIDOR
# ----------------------------------------------------------------------------

# Puerto donde se ejecutará el servidor backend
# Valor por defecto: 3001
PORT=3001

# Entorno de ejecución (development, production, test)
NODE_ENV=development

# ----------------------------------------------------------------------------
# CONFIGURACIÓN DE SERVICE ACCOUNT (ACCESO A GOOGLE DRIVE)
# ----------------------------------------------------------------------------
# 
# Para obtener estas credenciales:
# 1. Ve a Google Cloud Console (https://console.cloud.google.com/)
# 2. Ve a "IAM y administración" > "Cuentas de servicio"
# 3. Crea una nueva cuenta de servicio o selecciona una existente
# 4. Genera una clave JSON y extrae los valores de cada campo
# 5. Para Domain-Wide Delegation:
#    - Habilita "Domain-Wide Delegation" en la cuenta de servicio
#    - Ve a Google Admin Console > Seguridad > Controles de API > Delegación en todo el dominio
#    - Agrega el Client ID con los scopes necesarios

# Tipo de cuenta (siempre "service_account")
GOOGLE_SERVICE_ACCOUNT_TYPE=service_account

# ID del proyecto de Google Cloud
# Ejemplo: mi-proyecto-123456
GOOGLE_SERVICE_ACCOUNT_PROJECT_ID=tu-project-id-aqui

# ID de la clave privada
# Ejemplo: abcd1234efgh5678ijkl9012mnop3456qrst7890
GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY_ID=tu-private-key-id-aqui

# Clave privada (incluye -----BEGIN PRIVATE KEY----- y -----END PRIVATE KEY-----)
# IMPORTANTE: Mantén los \n para los saltos de línea
# Ejemplo: "-----BEGIN PRIVATE KEY-----\nMIIE...\n-----END PRIVATE KEY-----\n"
GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nTU-CLAVE-PRIVADA-COMPLETA-AQUI\n-----END PRIVATE KEY-----\n"

# Email de la cuenta de servicio
# Ejemplo: mi-service-account@mi-proyecto-123456.iam.gserviceaccount.com
GOOGLE_SERVICE_ACCOUNT_CLIENT_EMAIL=tu-service-account-email-aqui

# ID del cliente de la cuenta de servicio
# Ejemplo: 123456789012345678901
GOOGLE_SERVICE_ACCOUNT_CLIENT_ID=tu-service-account-client-id-aqui

# URI de autorización de Google (normalmente no cambia)
GOOGLE_SERVICE_ACCOUNT_AUTH_URI=https://accounts.google.com/o/oauth2/auth

# URI de token de Google (normalmente no cambia)
GOOGLE_SERVICE_ACCOUNT_TOKEN_URI=https://oauth2.googleapis.com/token

# URL de certificados X509 del proveedor de autenticación (normalmente no cambia)
GOOGLE_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL=https://www.googleapis.com/oauth2/v1/certs

# URL de certificado X509 del cliente
# Ejemplo: https://www.googleapis.com/robot/v1/metadata/x509/mi-service-account%40mi-proyecto-123456.iam.gserviceaccount.com
GOOGLE_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL=tu-client-cert-url-aqui

# Dominio del universo de Google (normalmente "googleapis.com")
GOOGLE_SERVICE_ACCOUNT_UNIVERSE_DOMAIN=googleapis.com

# ----------------------------------------------------------------------------
# CONFIGURACIÓN DE DOMAIN-WIDE DELEGATION
# ----------------------------------------------------------------------------

# Email del usuario para impersonación (REQUERIDO para Domain-Wide Delegation)
# Este debe ser un usuario administrador del dominio de Google Workspace
# Ejemplo: admin@empresa.com
IMPERSONATE_USER_EMAIL=admin@tu-dominio.com

# ----------------------------------------------------------------------------
# CONFIGURACIÓN DE GOOGLE DRIVE API
# ----------------------------------------------------------------------------

# Scopes de Google Drive (separados por coma)
# Estos scopes deben estar configurados en Google Admin Console para Domain-Wide Delegation
# Scopes recomendados:
# - https://www.googleapis.com/auth/drive: Acceso completo a Drive
# - https://www.googleapis.com/auth/drive.file: Acceso a archivos creados por la app
GOOGLE_DRIVE_SCOPES=https://www.googleapis.com/auth/drive,https://www.googleapis.com/auth/drive.file

# ----------------------------------------------------------------------------
# CONFIGURACIÓN DE FIRESTORE
# ----------------------------------------------------------------------------

# Las credenciales de Firestore usan las mismas variables del Service Account
# No se requieren variables adicionales si usas el mismo proyecto

# Colección principal en Firestore para almacenar datos de sincronización
# Valor por defecto: "shared_drives_sync"
FIRESTORE_COLLECTION=shared_drives_sync

# ----------------------------------------------------------------------------
# CONFIGURACIÓN DE SINCRONIZACIÓN
# ----------------------------------------------------------------------------

# Habilitar sincronización automática (true/false)
# En desarrollo normalmente se deshabilita para control manual
AUTO_SYNC_ENABLED=false

# Intervalo de sincronización automática en minutos
# Solo aplica si AUTO_SYNC_ENABLED=true
# Valor por defecto: 60 (1 hora)
SYNC_INTERVAL_MINUTES=60

# Número máximo de reintentos en caso de error
# Valor por defecto: 3
MAX_RETRY_ATTEMPTS=3

# Tiempo de espera entre reintentos en milisegundos
# Valor por defecto: 5000 (5 segundos)
RETRY_DELAY_MS=5000

# ----------------------------------------------------------------------------
# CONFIGURACIÓN DE LOGS
# ----------------------------------------------------------------------------

# Nivel de logs (error, warn, info, debug)
# Para producción se recomienda "info" o "warn"
LOG_LEVEL=info

# Habilitar logs detallados de Google Drive API (true/false)
# Solo para debugging, puede generar muchos logs
DRIVE_API_DEBUG=false

# ----------------------------------------------------------------------------
# CONFIGURACIÓN DE CORS (si el backend sirve APIs web)
# ----------------------------------------------------------------------------

# Orígenes permitidos para CORS (separados por coma)
# Para desarrollo: "http://localhost:3000"
# Para producción: "https://tu-dominio.com"
# Para permitir todos: "*" (NO recomendado en producción)
CORS_ORIGINS=http://localhost:3000

# ----------------------------------------------------------------------------
# CONFIGURACIÓN DE SEGURIDAD
# ----------------------------------------------------------------------------

# Clave secreta para operaciones internas (opcional)
# Puedes generar una con: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
INTERNAL_SECRET=tu-internal-secret-aqui

# Tiempo de vida de caché en segundos (opcional)
# Para datos de Drive que no cambian frecuentemente
CACHE_TTL_SECONDS=300

# ----------------------------------------------------------------------------
# CONFIGURACIÓN ESPECÍFICA DE GOOGLE WORKSPACE
# ----------------------------------------------------------------------------

# Dominio de Google Workspace (si aplica)
# Ejemplo: empresa.com
WORKSPACE_DOMAIN=tu-dominio.com

# ID de la unidad organizacional (opcional)
# Para limitar el acceso a usuarios de una OU específica
ORGANIZATION_UNIT_ID=

# ----------------------------------------------------------------------------
# NOTAS IMPORTANTES PARA PRODUCCIÓN
# ----------------------------------------------------------------------------
# 
# 1. DOMAIN-WIDE DELEGATION:
#    - La cuenta de servicio debe tener Domain-Wide Delegation habilitado
#    - Los scopes deben estar autorizados en Google Admin Console
#    - El usuario de impersonación debe ser administrador del dominio
# 
# 2. SEGURIDAD:
#    - Usa conexiones HTTPS en producción
#    - Configura firewalls apropiados
#    - Monitorea el acceso a las APIs
#    - Rota las claves regularmente
# 
# 3. GOOGLE CLOUD:
#    - Habilita las APIs necesarias: Drive API, Admin SDK
#    - Configura cuotas y límites apropiados
#    - Habilita auditoría y logging
# 
# 4. FIRESTORE:
#    - Configura reglas de seguridad restrictivas
#    - Habilita backups automáticos
#    - Monitorea el uso y costos
# 
# 5. MONITOREO:
#    - Configura alertas para errores de API
#    - Monitorea el uso de cuotas
#    - Implementa health checks
# 
# 6. ESCALABILIDAD:
#    - Considera usar Cloud Run o similar para auto-scaling
#    - Implementa rate limiting si es necesario
#    - Usa Redis para caché distribuido si tienes múltiples instancias
# 
# ============================================================================